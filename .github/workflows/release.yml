name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

permissions:
  contents: write
  discussions: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: win32
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Windows build environment
        if: matrix.os == 'windows-latest'
        run: |
          # 确保构建环境正确设置
          npm config set msvs_version 2019
        continue-on-error: true

      - name: Build application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          npm run build:linux
          echo "=== Linux Build Output ==="
          ls -lah dist/ || echo "No dist directory found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: .cache/electron
          ELECTRON_BUILDER_CACHE: .cache/electron-builder

      - name: Build application (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm run build:win
          echo "=== Windows Build Output ==="
          if (Test-Path "dist") { Get-ChildItem -Path "dist" -Recurse } else { echo "No dist directory found" }
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: .cache/electron
          ELECTRON_BUILDER_CACHE: .cache/electron-builder

      - name: Build application (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          npm run build:mac
          echo "=== macOS Build Output ==="
          ls -lah dist/ || echo "No dist directory found"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ELECTRON_CACHE: .cache/electron
          ELECTRON_BUILDER_CACHE: .cache/electron-builder
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/
          retention-days: 5
          if-no-files-found: warn

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/
          retention-days: 5
          if-no-files-found: warn

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/
          retention-days: 5
          if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: |
          echo "=== Artifacts directory structure ==="
          find artifacts -type f -name "*" | sort
          echo ""
          echo "=== File sizes ==="
          find artifacts -type f -name "*" -exec ls -lh {} \;

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          echo "=== Preparing release assets ==="
          
          # 复制所有构建文件到 release-assets 目录
          find artifacts -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} release-assets/ \;
          
          echo "=== Release assets ==="
          ls -lah release-assets/
          
          echo "=== Total files to upload ==="
          find release-assets -type f | wc -l

      - name: Get version from tag or input
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "tag_name=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 自动截图工具 ${{ steps.get_version.outputs.version }}

          ### ✨ 主要功能
          - 🖼️ 自动定时截图，支持自定义间隔
          - 🔍 智能图片相似度检测，避免重复保存
          - 📝 OCR文字识别（可选）
          - 🗂️ 图片分类管理和搜索
          - 📱 图片浏览、下载、复制功能
          - ⚙️ 灵活的配置选项
          - 🔄 开机自启支持

          ### 📦 下载说明
          
          **Windows 用户：**
          - `*.exe` - 安装程序（推荐）
          - `*.msi` - MSI安装包
          
          **macOS 用户：**
          - `*.dmg` - macOS磁盘映像（推荐）
          
          **Linux 用户：**
          - `*.AppImage` - 便携式应用（推荐）
          - `*.deb` - Debian/Ubuntu包
          - `*.rpm` - RedHat/CentOS包

          ### 🔧 系统要求
          - Windows 10+ / macOS 10.13+ / Linux (x64)
          - Node.js 16+ (开发环境)

          ### 📝 更新日志
          请查看 [CHANGELOG.md](CHANGELOG.md) 了解详细更新内容。

          ---
          🤖 此版本由 GitHub Actions 自动构建
          EOF

      - name: Create Release and Upload Assets
        if: hashFiles('release-assets/*') != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.tag_name }}
          name: 自动截图工具 ${{ steps.get_version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: release-assets/*
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check if release was created
        run: |
          if [ "$(find release-assets -type f | wc -l)" -eq 0 ]; then
            echo "❌ No release assets found!"
            exit 1
          else
            echo "✅ Release created with $(find release-assets -type f | wc -l) assets"
          fi